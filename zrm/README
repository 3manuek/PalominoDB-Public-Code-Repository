= README For the xtrabackup ZRM plugin =

For configuration examples/usage. See the included mysql-zrm.conf file
under the examples directory.

== General usage notes ==

When the plugins are configured to not unpack backups (write a tar directly),
for fulls, you MUST use the '-i' option when extracting the backup. This is
because innobackupex creates a semi-nonstandard tar-stream. This may be fixed
in a later release.


== Legacy upgrades ==
  Upgrading from legacy socket-server based plugins (0.72 or 1.87b_palomino)
  to 0.80 or above. If you were using the legacy plugins, the following is a
  bullet point summary of the things that have changed:

  * The logfile /var/log/mysql-zrm/socket-server.log is now /var/log/mysql-zrm/xtrabackup-agent.log

  * The "snapshot plugin" inno-snapshot.pl has been renamed stub-snapshot.pl and only needs to be
    on the backup server. It's harmless to put it on the db server, but it will never be used.

  * You cannot use socket-copy.palomino.pl with xtrabackup-agent.pl. Incompatibile protocol changes
    have been made. Going forward, it's not anticipated the protocol will change again.
    Instead, set your copy-plugin to xtrabackup-client.pl.

  * /etc/xinetd.d/zrm-palomino has been renamed /etc/xinetd.d/xtrabackup-agent
  * There's a new log: /var/log/mysql-zrm/xtrabackup-client.pl on the backup server.
    It contains errors, and when you run backups by hand, setting Pdb_DEBUG=1 it will include copious
    debugging information.

  * All options to the plugins are now prefixed with either 'xtrabackup-client:' or 'xtrabackup-agent:'.
    See the example configuration in examples/mysql-zrm.conf for a full list of supported options.

  * The directory /tmp/zrm-innosnap is not created anymore.

  * The required list of perl modules has increased in this release:
    - DBI (and DBD::mysql) are now required.
    - Digest::MD5 is now required (but usually distributed with a basic perl install).

  * The configuration file /usr/share/mysql-zrm/socket-server.conf is now soft-deprecated.
    The options in it have not been migrated to centralized configuration, but, if you are
    using any, be aware that they will be over the coming releases, and then that file will
    not be read anymore.

== Installing ==
  Place all of the perl scripts in /usr/share/mysql-zrm/plugins,
  or to whatever root you have installed zrm in. (So /usr/local/share/mysql-zrm/plugins,
  if your root is /usr/local.)
  The scripts need to be executable, and owned by the zrm user (usually mysql).
  The sample mysql-zrm.conf file provided can be used as a template for config.
  You should also probably place zrm_nsca.cfg in /usr/share/mysql-zrm/plugins
  and make it readable by the zrm user, so that socket-server.palomino.pl can
  send status to nagios.

  You must edit socket_server.conf to point to your real nagios server,
  and the real path to send_nsca, and the real path to a nsca config file readable
  by the zrm user.

  /etc/xinetd.d/mysql-zrm-socket-server needs to have this line:
  server = /usr/share/mysql-zrm/plugins/xtrabackup-agent.pl
  Or, you can use the provided xtrabackup-agent.xinetd config file, and reload xinetd.

  Included in the tarball is the file example_nagios.cfg, which contains a service
  definition, and a couple command definitions that should work with a stock
  redhat/centos nagios install. It should obviously be modified to suit your environment.

  Be aware that this socket server (by design) will not interoperate with stock zrm
  plugins. The version number was changed to protect you against any badness from
  possible incompatibilities introduced.

== Files and permissions ==
  The scripts MUST have the ability to create and read files in /tmp.
  The plugins create /tmp/innobackupex-log, which is a fifo for reading the logs from innobackupex
  so that it can monitor the state of the backup.

== Logs/Troubleshooting ==
  - /var/log/mysql-zrm/xtrabackup-agent.log, xtrabackup-client.log
    These contain detailed error and debugging entries for tracking down the
    source of problems.
  - Pdb_DEBUG environment variable.
    Setting this to true (1) will enable copious amounts of debugging information.
    To make the agent write debugging entries, add the line:
    env = Pdb_DEBUG=1
    to /etc/xinetd.d/xtrabackup-agent and reload xinetd.
