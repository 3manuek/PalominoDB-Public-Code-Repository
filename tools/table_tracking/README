== Contents

  1. Overview
  2. Where to get it
  3. Requirements
  4. Installing
  5. Configuring
  6. Examples

== Overview

Table Tracking Toolkit allows simple collecting and detailed reporting on:

- Table schema changes (tracking 'show create table' changes over time)
- Table volume-metrics (tracking table size over time)

TTT has a pluggable system for implementing new metrics which could be used
to track other things like "SHOW STATUS".


TTT also has a pluggable reporting/querying interface which out of the box
support for generating reports suitable for:
- text viewing ( in the moment troubleshooting, see when it went wrong )
- email ( being kept apprise of developer madness )
- nagios ( being alerted of developer madness )

The API docs contain examples, and reference to get you started.

== Obtaining gems

The lastest table tracking toolkit gem can always be found on bastion
under /home/sourcecode/PdbTools/.

== Requirements

Minimally, you need the table tracking gem, the pdb-dsn, gem,
activerecord, actionmailer, actionpack, text-reform, sqlite3-ruby, and diff-lcs

All of those can be installed with the `gem` command.

== Installing

If you're reading this, I suspect you already have, but if not:

    $ sudo gem install pdb-dsn-<version>.gem table-tracking-toolkit-<version>.gem

Is all that is required for installing.

== Configuring

Minimally, what you need is a config.yml, a PDB dsn file,
and somewhere to store the tracked data.
An example of a config.yml, and a dsn.yml are included in the distribution.

It's recommended that you place your configuration somewhere like:
  - /etc/pdb/ttt
  - /usr/local/etc/pdb/ttt

But the toolkit does not enforce any particular location.

You will also need an sql user to do the data collection.
It is Highly recommended that you make a user just for ttt, for both security
and accountability purposes. TTT needs 'select', and 'show view' priviliges.

   GRANT SELECT, SHOW VIEW ON *.* TO 'ttt'@'ops.example.com' IDENTIFIED BY 'password'

The above query give the 'ttt' user the appropriate permissions.

== Examples

For best results 'ttt-collect' should be run daily or every N hours.
Running it or 'ttt-query' with '--help', or '-h', will show usage information.

In general, though, your 'ttt-collect' commandline will be:
    $ /usr/bin/ttt-collect --config /usr/local/pdb/ttt/config.yml --dsn /usr/local/pdb/dsn.yml
That should be put in a crontab and run as often as you feel like.

To be emailed of any table changes that happen:
    $ /usr/bin/ttt-query --config /usr/local/pdb/ttt/config.yml --stat definition --since last

The report generated shows you what happened with the most recent 'version' 
of each table. The output is: "compare the most recent entry
with the previous". For table definitions, only changes are stored, so,
if a new table was created and then never altered,
it will always show up as 'new' in that query.

It's a useful display, but often it's better to use --since to prune
any changes older than a certain age.
For example, if you run the collector every 4 hours,
then running this query would probably be more interesting:
    $ /usr/bin/ttt-query -c /usr/local/pdb/ttt/config.yml --stat definition --since 4h

Which will only show 'new' tables in the 4 hour window that they showed up in.

Volumetrics are collected every time, regardless of changes. This is to support export to rrd and other tools.

    $ /usr/bin/ttt-query -c /usr/local/pdb/ttt/config.yml --stat volume --order 'data_length+index_length desc' --limit 50

This will show you the top 50 tables ordered by size after doing 'ignore tables' handling. To report on all tables add '--raw' to the commandline.
