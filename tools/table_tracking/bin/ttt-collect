#!/usr/bin/ruby
require 'rubygems'
require 'yaml'
require 'getoptlong'
require 'open-uri'
require 'text/reform'

require 'pdb/dsn'
require 'ttt/db'
require 'ttt/collector'

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--config', '-c', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--dsn', '-d', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--debug', GetoptLong::NO_ARGUMENT ],
  [ '--verbose', GetoptLong::NO_ARGUMENT ],
  [ '--stat', '-s', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--list-stats', '-l', GetoptLong::NO_ARGUMENT ]
)

dsn=nil
cfg=nil
debug=false
verbose=false
stats=[]

opts.each do |opt, val|
  case opt
    when '--help'
      puts <<DOC_EOF
== Synopsis

ttt-collect: Run a table tracking collection

== Usage

ttt-collect [--help] --config config.yml --dsn servers.yml

-h, --help:
   This help
--config file, -c file:
   Path to ttt config file.
--debug:
   Make the tool VERY noisy.
--dsn file, -d file:
   Path to PalominoDB dsn.yml
--stat statistic:
   Collect a single <statistic>.
   See --list-stats for available statistics.
--list-stats, -l:
   List available statistics.
DOC_EOF
      exit 1
    when '--config'
      cfg = YAML.load_file(val)
    when '--dsn'
      dsn = Pdb::DSN.new(val)
      dsn.validate
    when '--debug'
      debug=true
    when '--verbose'
      verbose=true
    when '--stat'
      stats<<TTT::TrackingTable.tables[val.to_sym]
    when '--list-stats'
      rf=Text::Reform.new
      rf.trim=true
      TTT::CollectorRegistry.load
      cols=TTT::CollectorRegistry.all
      names= cols.map { |c| c.stat.collector }
      descs= cols.map { |c| c.desc }
      puts rf.format("Available statistics:", "[[[[[[[[[[[[[[[ - "+ ("["*80), names,descs)
      exit(0)
  end
end

if cfg.nil?
  puts "Must specify configuration."
  puts "Use --help for more."
  exit 1
end
if dsn.nil?
  puts "Must specify dsn."
  puts "Use --help for more."
  exit 1
end

if debug then
  ActiveRecord::Base.logger = ActiveSupport::BufferedLogger.new(STDOUT, ActiveSupport::BufferedLogger::Severity::DEBUG)
else
  ActiveRecord::Base.logger = ActiveSupport::BufferedLogger.new(STDOUT, ActiveSupport::BufferedLogger::Severity::INFO)
end

TTT::Db.open(cfg)
# Creates the database, if it doesn't exist,
# and will upgrade it too!
TTT::Db.migrate

TTT::Collector.verbose = verbose

Runtime=Time.now

begin
  TTT::Snapshot.transaction do |txn_id|
    hosts=dsn.get_all_hosts.reject { |h| !dsn.host_active? h }
    director = TTT::CollectionDirector.new(cfg, Runtime)
    rds={}
    hosts.each do |host|
      TTT::CollectorRegistry.all.each do |coller|
        next unless stats.empty? or stats.include? coller.stat
        rd=director.collect(host, coller)
        rds[rd.stat] = [] if rds[rd.stat].nil?
        puts "NEW TXN: #{txn_id}"
        puts "rd changed: #{rd.changed?}"
        rds[rd.stat]<<rd
      end
    end
    rds.each do |k,v|
      if v.any? { |r| r.changed? }
        v.each { |r| r.save txn_id }
      end
    end
  end
rescue Exception => e
  $stderr.puts e
  $stderr.puts e.backtrace
  exit 1
end

exit 0
