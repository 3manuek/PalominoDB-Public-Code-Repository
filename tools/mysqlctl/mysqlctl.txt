Mysqlctl Tool and init script
=============================

Ordinary init scripts for mysql do not take into account
a number of situations that can occur in mysql during shutdown
which can result in data loss and or corruption. This tool was
made to fill that roll.

As of the initial release, it explicitly executes `STOP SLAVE`,
and runs `FLUSH LOGS` 3 times to ensure that all binlog contents
are safely on disk. If 3 times is not enough for you, there are tunables
that can raise that.

One of the principal purposes of this tool is to provide
automation tools real information about the success or failure
of the requested operation. Based on testing done during
the development of this script, it was found that none of the init
scripts for RedHat, Debian, or FreeBSD could be depended upon to
return real, useful, results via exit status.

Features
--------

- Explicitly stopping the slave
- Configurable log flushing
- Controlling InnoDB shutdown

Usage as a tool
---------------

  mysqlctl <start|stop|status>

If invoked as any of: `mysql.start`, `mysql.stop`, `mysql.status`
Then the corresponding action above is run.

Usage as an init script
-----------------------

The script contains the necessary declarations to
be recognized by both chkconfig (redhat), and lsb (debian)
based init tools.

RedHat
~~~~~~

  service site-mysql <start|stop|status>

Debian
~~~~~~

  /etc/init.d/site-mysql <start|stop|status>



Configuration
-------------

Editing `/etc/myctl.cnf` configures this script.
It's a regular my.cnf file, so, configuration for this
script should be placed under a `[mysqlctl]` section.

Currently supported tunables are:

`start_timeout`::
    How long to wait for mysql to start. +
    Default: 1800

 `stop_timeout`::
    How long to wait for mysql to stop
    mysql May still stop After this time,
    but this script will not wait indefinitely. +
    Default: 1800

`flushes`::
    How many times to execute `FLUSH LOGS`. +
    Default: 3

`flush_sleep`::
    How long to sleep between flushing. +
    Default: 1

`innodb_shutdown`::
    What kind of shutdown InnoDB should do.
    Possible values are: 0, 1, or 2.
    See <http://dev.mysql.com/doc/refman/5.1/en/innodb-parameters.html#sysvar_innodb_fast_shutdown> for details.

`hook_script`::
    Script to call with the success or failure of the start and stop actions.
    This script should define two functions: +hook_start+ and +hook_stop+.
    Both are called with one parameter which is the result of the action.
    Possible values for the +hook_start+ action are: +already_running+,
    +stale_pidfile+, +started+, +timed_out+. And, possible values for
    +hook_stop+ are: +stale_pidfile+, +socket_but_no_pidfile+,
    +already_stopped+, +flush_logs_failed+, +stopped+, +timed_out+.

Exit codes
----------

- 7 - could not open defaults file
- 6 - start/stop out of sync (e.g., start when already started)
- 5 - slave ctl failed (could not stop slave)
- 4 - flushes failed (could not flush logs)
- 3 - missing configuration ( cnf does not contain required parameter )
- 2 - stale pid-file ( pid file points to dead proc )
- 1 - timeout/not running
       ( mysql did not start/stop by  seconds, or
         mysql is not running when "status" is the action )
- 0 - ok ( control successful )
