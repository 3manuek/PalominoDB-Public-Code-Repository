#!/bin/bash
# Copyright (c) 2009-2010, PalominoDB, Inc.
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#   * Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
# 
#   * Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
# 
#   * Neither the name of PalominoDB, Inc. nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# PalominoDB mysqlctl - safe(r) mysql init scripts
#
# exit codes:
#   7 - could not open defaults file
#   6 - start/stop out of sync (e.g., start when already started)
#   5 - slave ctl failed
#   4 - flushes failed
#   3 - missing configuration
#   2 - stale pid-file
#   1 - timeout
#   0 - ok
#

# The following blocks are to allow this tool to be symlinked
# or hard-linked into /etc/init.d and /etc/rcX.d/

# Comments to support chkconfig on RedHat Linux
# chkconfig: 2345 64 18
# description: A very fast and reliable SQL database engine.

# Comments to support LSB init script conventions
### BEGIN INIT INFO
# Provides: mysql
# Required-Start: $local_fs $network $remote_fs sshd
# Should-Start: ypbind nscd ldap ntpd xntpd
# Required-Stop: $local_fs $network $remote_fs sshd
# Default-Start:  2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start and stop MySQL
# Description: MySQL is a very fast and reliable SQL database engine.
### END INIT INFO

#############################################################################
# This script is designed to have all tunables changed in the below config
# file. Whenever possible, sensible defaults are pre-selected or taken from
# the system my.cnf. That means /etc/my.cnf on redhat, and /etc/mysql/my.cnf
# on debian derived boxes.
# If you can avoid it for any reason, don't change the path to the config
# file, even. Since, upgrades to the rpm or debian package this script
# came with will overwrite your changes.
#############################################################################
MYCTL_CNF=/etc/myctl.cnf
#############################################################################
# Unless you ABSOLUTELY need to, do not modify this script.
#############################################################################

INIT_NAME=

## If the script is called from a known init directory
## we set the tname of the init script to the filename of the script.
## This supports calling the script something other than mysqlctl
case $0 in
  *rc?.d*)
    INIT_NAME=$(basename $(readlink $0))
  ;;
  *init.d*)
    INIT_NAME=$(basename $0)
  ;;
esac

## Explicit $PATH is needed for during boot
## It also adds a modicum of extra security
PATH=/bin:/sbin:/usr/bin:/usr/sbin
export PATH

pid_file=
datadir=
mysqld_safebin=
mysqladminbin=
mysqlclientbin=
user=mysql
socket=
basedir=

# mysqlctl default vars
# Both start and stop actions have timeouts
# because otherwise scripts which call us may hang
# indefinitely if mysql doesn't start or stop
# and that's bad.
start_timeout=1800
stop_timeout=1800
flushes=3
flush_sleep=5
ulimit_locked=unlimited

if [[ ! -f $MYCTL_CNF ]] ; then
  echo Unable to find $MYCTL_CNF
  exit 7
fi

for l in `my_print_defaults mysqld mysqld_safe`; do
  case $l in
    --pid-file=*)
      pid_file=$(echo $l | sed -e 's/^[^=]*=//')
      ;;
    --datadir=*)
      datadir=$(echo $l | sed -e 's/^[^=]*=//')
      ;;
    --user=*)
      user=$(echo $l | sed -e 's/^[^=]*=//')
      ;;
    --socket=*)
      socket=$(echo $l | sed -e 's/^[^=]*=//')
      ;;
    --basedir=*)
      basedir=$(echo $l | sed -e 's/^[^=]*=//')
      ;;
  esac
done

if [[ -z $socket ]] ; then
  echo Missing --socket in defaults.
  exit 3
fi

if [[ -z $datadir ]] ; then
  echo Missing --datadir in defaults.
  exit 3
fi

if [[ -z $pid_file ]] ; then
  pid_file=$datadir/$(hostname).pid
fi

# collect defaults from $MYCTL_CNF
for l in `my_print_defaults --defaults-file=$MYCTL_CNF mysqlctl`; do
  case $l in
    --*=*)
      var=$(echo $l | sed -e 's/^--\(.*\)=.*$/\1/')
      val=$(echo $l | sed -e 's/^[^=]*=//')
      eval "$var=$val"
      ;;
  esac
done

hook_start() {
  : # default no-op implementation
}

hook_stop() {
  : # default no-op implementation
}

if [[ -n "$hook_script" ]]; then
  . $hook_script
fi

## If basedir is defined then add
## $basedir/{bin,sbin} to the path so that we
## might find mysqld and utilties
if [[ -n "$basedir" ]] ; then
  PATH=${PATH}:$basedir/bin:$basedir/sbin
  export PATH
fi

## Set default paths if not set in the config.
if [[ -z "$mysqld_safebin" ]]; then
  mysqld_safebin=$(which mysqld_safe)
fi
if [[ -z "$mysqladminbin" ]]; then
  mysqladminbin=$(which mysqladmin)
fi
if [[ -z "$mysqlclientbin" ]]; then
  mysqlclientbin=$(which mysql)
fi

## Deal with some ulimit values
if [[ -n "$ulimit_locked" ]]; then
  ulimit -l $ulimit_locked
fi

start_mysql() {
  if [[ -f $pid_file ]] ; then
    pid=$(cat $pid_file)
    if [[ -d "/proc/$pid" ]] ; then
      hook_start already_running
      echo MySQL Running.
      exit 6
    fi
    hook_start stale_pidfile
    echo Stale pid-file. Did MySQL crash?
    echo Remove $pid_file if ok
    exit 2
  fi

  $mysqld_safebin --pid-file=$pid_file --socket=$socket &>/dev/null &
  disown
  i=0
  while [[ $i -lt $start_timeout ]]; do
    sleep 1 # Always sleep at least one second.
    if [[ -f $pid_file ]] ; then
      ## /var/lock/subsys is for redhat type init systems
      if [[ -d "/var/lock/subsys" && -n "$INIT_NAME" ]]; then
        touch /var/lock/subsys/$INIT_NAME &>/dev/null
      fi
      hook_start started
      echo MySQL Started.
      exit 0
    fi
    i=$(( $i + 1 ))
  done
  hook_start timed_out
  echo MySQL start timed out.
  exit 1
}

stop_mysql() {
  if [[ -f $pid_file ]] ; then
    pid=$(cat $pid_file)
    if [[ ! -d "/proc/$pid" ]] ; then
      hook_stop stale_pidfile
      echo Stale pid-file. Did MySQL crash?
      echo Remove $pid_file if ok
      exit 2
    fi
  elif [[ -f $socket ]] ; then
    hook_stop socket_but_no_pidfile
    echo Socket present, but pid-file missing.
    echo Need pid-file.
    exit 2
  else
    hook_stop already_stopped
    echo MySQL not running.
    exit 6
  fi

  ## Set InnoDB shutdown type, if it was specified in the config
  if [[ -n "$innodb_shutdown" ]]; then
    $mysqlclientbin --defaults-file=$MYCTL_CNF --socket=$socket -e "SET GLOBAL innodb_fast_shutdown=$innodb_shutdown"
  fi

  ## Flush logs $flushes times to ensure that binlog data is synced to disk.
  $mysqladminbin --defaults-file=$MYCTL_CNF --socket=$socket stop-slave
  while [[ $flushes -gt 0 ]] ; do
    $mysqladminbin --defaults-file=$MYCTL_CNF --socket=$socket flush-logs
    if [[ ! $? ]] ; then
      $mysqladminbin --defaults-file=$MYCTL_CNF --socket=$socket start-slave
      hook_stop flush_logs_failed
      echo MySQL flush logs failed.
      exit 4
    fi
    sleep $flush_sleep
    echo Flushed logs $flushes
    flushes=$(( $flushes - 1 ))
  done

  kill $(cat $pid_file)
  i=0
  while [[ $i -lt $stop_timeout ]]; do
    sleep 1 # Always sleep at least one second.
    if [[ ! -f $pid_file ]] ; then
      ## /var/lock/subsys is for redhat type init systems
      if [[ -d "/var/lock/subsys" && -n "$INIT_NAME" ]]; then
        rm -f /var/lock/subsys/$INIT_NAME &>/dev/null
      fi
      hook_stop stopped
      echo MySQL Stopped.
      exit 0
    fi
    i=$(( $i + 1 ))
  done
  hook_stop timed_out
  echo MySQL stop timed out.
  exit 1
}

ACTION=$1

case $0 in
  *mysql.start)
    ACTION=start
  ;;
  *mysql.stop)
    ACTION=stop
  ;;
  *mysql.status)
    ACTION=status
  ;;
esac

case $ACTION in
  start)
    start_mysql
  ;;
  stop)
    stop_mysql
  ;;
  status)
    if $mysqladminbin --defaults-file=$MYCTL_CNF --socket=$socket ping &>/dev/null
    then
      echo "MySQL Running."
      exit 0
    else
      echo "MySQL Not Running."
      exit 1
    fi
  ;;
  *)
  cat <<EOF
Usage:
  mysqlctl <start|stop|status>

If invoked as any of: mysql.start, mysql.stop, mysql.status
Then the corresponding action above is run.

Exit codes:
  7 - could not open defaults file
  6 - start/stop out of sync (e.g., start when already started)
  5 - slave ctl failed (could not stop slave)
  4 - flushes failed (could not flush logs)
  3 - missing configuration ( cnf does not contain required parameter )
  2 - stale pid-file ( pid file points to dead proc )
  1 - timeout/not running
      ( mysql did not start/stop by $timeout seconds, or
        mysql is not running when 'status' is the action )
  0 - ok ( control successful )

Configuration:

Editing $MYCTL_CNF configures this script.
It's a regular my.cnf file, so, configuration for this
script should be placed under a [mysqlctl] section.

Currently supported tunables are:
  - start_timeout     How long to wait for mysql to start.
                      Currently set: $start_timeout

  - stop_timeout      How long to wait for mysql to stop
                      mysql May still stop After this time,
                      but this script will not wait indefinitely.
                      Currently set: $stop_timeout

  - flushes           How many times to execute FLUSH LOGS
                      Currently set: $flushes

  - flush_sleep       How long to sleep between flushing.
                      Currently set: $flush_sleep

  - innodb_shutdown   What kind of shutdown InnoDB should do.
                      Currently set: $innodb_shutdown
                      See the sample config for values, or [1].

  - hook_script       Script to call with the success or failure
                      of the start and stop actions.

Advanced tuneables:
  These options are available in the config file, but, are best
  left to their default values, since they only need changing in
  special circumstances.

  - ulimit_locked     Tune the ulimit for locked memory for mysql.
                      Currently set: $ulimit_locked
                      See the ulimit manpage for more.


References:
[1]  http://dev.mysql.com/doc/refman/5.1/en/innodb-parameters.html#sysvar_innodb_fast_shutdown
EOF
  ;;
esac
