#!/bin/bash
#
# PalominoDB mysqlctl - safe(r) mysql init scripts
#
# exit codes:
#   7 - could not open defaults file
#   6 - start/stop out of sync (e.g., start when already started)
#   5 - slave ctl failed
#   4 - flushes failed
#   3 - missing configuration
#   2 - stale pid-file
#   1 - timeout
#   0 - ok
#

# The following blocks are to allow this tool to be symlinked
# or hard-linked into /etc/init.d and /etc/rcX.d/

# Comments to support chkconfig on RedHat Linux
# chkconfig: 2345 64 18
# description: A very fast and reliable SQL database engine.

# Comments to support LSB init script conventions
### BEGIN INIT INFO
# Provides: mysql
# Required-Start: $local_fs $network $remote_fs sshd
# Should-Start: ypbind nscd ldap ntpd xntpd
# Required-Stop: $local_fs $network $remote_fs sshd
# Default-Start:  2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start and stop MySQL
# Description: MySQL is a very fast and reliable SQL database engine.
### END INIT INFO


MYCTL_CNF=/etc/myctl.cnf

pid_file=
datadir=
mysqld_safebin=$(which mysqld_safe)
mysqladminbin=$(which mysqladmin)
user=mysql
socket=

# mysqlctl vars
start_timeout=30
stop_timeout=30
flushes=3
flush_sleep=5

if [[ ! -f $MYCTL_CNF ]] ; then
  echo Unable to find $MYCTL_CNF
  exit 7
fi

for l in `my_print_defaults mysqld`; do
  case $l in
    --pid-file=*)
      pid_file=$(echo $l | sed -e 's/^[^=]*=//')
      ;;
    --datadir=*)
      datadir=$(echo $l | sed -e 's/^[^=]*=//')
      ;;
    --user=*)
      user=$(echo $l | sed -e 's/^[^=]*=//')
      ;;
    --socket=*)
      socket=$(echo $l | sed -e 's/^[^=]*=//')
      ;;
  esac
done

if [[ -z $pid_file ]] ; then
  echo Missing --pid-file in defaults.
  exit 3
fi

if [[ -z $socket ]] ; then
  echo Missing --socket in defaults.
  exit 3
fi

if [[ -z $datadir ]] ; then
  echo Missing --datadir in defaults.
  exit 3
fi

# collect defaults from $MYCTL_CNF
for l in `my_print_defaults --defaults-file=$MYCTL_CNF mysqlctl`; do
  case $l in
    --*=*)
      var=$(echo $l | sed -e 's/^--\(.*\)=.*$/\1/')
      val=$(echo $l | sed -e 's/^[^=]*=//')
      eval "$var=$val"
      ;;
  esac
done

start_mysql() {
  if [[ -f $pid_file ]] ; then
    pid=$(cat $pid_file)
    if [[ -d "/proc/$pid" ]] ; then
      echo MySQL Running.
      exit 6
    fi
    echo Stale pid-file. Did MySQL crash?
    echo Remove $pid_file if ok
    exit 2
  fi

  $mysqld_safebin --pid-file=$pid_file --socket=$socket &>/dev/null &
  disown
  i=0
  while [[ $i -lt $start_timeout ]]; do
    sleep 1 # Always sleep at least one second.
    if [[ -f $pid_file ]] ; then
      echo MySQL Started.
      exit 0
    fi
    i=$(( $i + 1 ))
  done
  echo MySQL start timed out.
  exit 1
}

stop_mysql() {
  if [[ -f $pid_file ]] ; then
    pid=$(cat $pid_file)
    if [[ ! -d "/proc/$pid" ]] ; then
      echo Stale pid-file. Did MySQL crash?
      echo Remove $pid_file if ok
      exit 2
    fi
  elif [[ -f $socket ]] ; then
    echo Socket present, but pid-file missing.
    echo Need pid-file.
    exit 2
  else
    echo MySQL not running.
    exit 6
  fi

  $mysqladminbin --defaults-file=$MYCTL_CNF stop-slave
  while [[ $flushes -gt 0 ]] ; do
    $mysqladminbin --defaults-file=$MYCTL_CNF flush-logs
    if [[ ! $? ]] ; then
      $mysqladminbin --defaults-file=$MYCTL_CNF start-slave
      echo MySQL flush logs failed.
      exit 4
    fi
    sleep $flush_sleep
    echo Flushed logs $flushes
    flushes=$(( $flushes - 1 ))
  done

  kill $(cat $pid_file)
  i=0
  while [[ $i -lt $stop_timeout ]]; do
    sleep 1 # Always sleep at least one second.
    if [[ ! -f $pid_file ]] ; then
      echo MySQL Stopped.
      exit 0
    fi
    i=$(( $i + 1 ))
  done
  echo MySQL stop timed out.
  exit 1
}

ACTION=$1

case $0 in
  *mysql.start)
    ACTION=start
  ;;
  *mysql.stop)
    ACTION=stop
  ;;
  *mysql.status)
    ACTION=status
  ;;
esac

case $ACTION in
  start)
    start_mysql
  ;;
  stop)
    stop_mysql
  ;;
  status)
    if $mysqladminbin --defaults-file=$MYCTL_CNF ping &>/dev/null
    then
      echo "MySQL Running."
      exit 0
    else
      echo "MySQL Not Running."
      exit 1
    fi
  ;;
  *)
  cat <<EOF
Usage:
  mysqlctl <start|stop|status>

If invoked as any of: mysql.start, mysql.stop, mysql.status
Then the corresponding action above is run.

exit codes:
  7 - could not open defaults file
  6 - start/stop out of sync (e.g., start when already started)
  5 - slave ctl failed (could not stop slave)
  4 - flushes failed (could not flush logs)
  3 - missing configuration ( cnf does not contain required parameter )
  2 - stale pid-file ( pid file points to dead proc )
  1 - timeout/not running
      ( mysql did not start/stop by $timeout seconds, or
        mysql is not running when 'status' is the action )
  0 - ok ( control successful )
EOF
  ;;
esac
