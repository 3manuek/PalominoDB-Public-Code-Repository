#!/usr/bin/env perl
# make_dist
# Copyright (C) 2009-2013 PalominoDB, Inc.
# 
# You may contact the maintainers at eng@palominodb.com.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

use strict;
use warnings FATAL => 'all';
use English qw(-no_match_vars);
use Getopt::Long qw(:config no_ignore_case);

BEGIN {
  die("Need PDB_CODE_ROOT set in the environment to the base of a checkout") unless($ENV{PDB_CODE_ROOT});
  use lib "$ENV{PDB_CODE_ROOT}/util/build";
}

require 'insert_module';

my $manifest_ver = "";
my $input = "";
my @module_paths = ($ENV{PDB_CODE_ROOT}.'/util/lib');
my @modules;

if(scalar @ARGV < 2) {
  print("Usage: $0 [--lib path] IN_SCRIPT OUT_SCRIPT\n\n");
  print("--lib sets the search path for modules.\n  Defaults to $ENV{PDB_CODE_ROOT}/util/lib\n");
  exit(1);
}

GetOptions(
  'lib|L=s@' => \@module_paths
);

# Legacy behavior
if(!@module_paths) {
  push @module_paths, shift @ARGV;
}

my $infile = shift @ARGV;
my $outfile = shift @ARGV;

{
  local $/ = undef;

  open my $file, "<$infile";
  $input = <$file>;
  close $file;

  open $file, "<$ENV{PDB_CODE_ROOT}/manifest.uuid" or die('manifest.uuid: '. $!);
  chomp($manifest_ver = <$file>);
  close $file;
}

$input =~ s/\bMANIFEST_BUILD\b/$manifest_ver/g;

(@modules) = $input =~ /^# ([A-Z0-9a-z_]+(?:::[A-Z0-9a-z_]+)*) package (?:[a-f0-9]{40}|GIT_VERSION|FSL_VERSION)/mg;

foreach my $m (@modules) {
  SEARCH_PATH: foreach my $mpath (@module_paths) {
    eval {
      $input = SrcUtils::insert_module($mpath, $m, $input);
    };
    unless($@) {
      last;
    }
  }
}
foreach my $m (@modules) {
  $input =~ s/^\s*use\s+$m;//mg;
}

open my $output, ">$outfile";
print $output $input;
close $output;
